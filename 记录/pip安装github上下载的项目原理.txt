以下命令是安装nerfstudio的指令：
git clone https://github.com/nerfstudio-project/nerfstudio.git
cd nerfstudio
pip install --upgrade pip setuptools
pip install -e .

执行完该指令以后，nerfstudio就进入了我们的pip安装包库中。

若要执行该指令，当前目录下必须包含：
1. setup.py：这是一个包含有关软件包的元数据的文件，例如名称、版本、作者、许可证等。它还包含有关如何安装软件包的信息。
2. requirements.txt（可选）：这是一个包含软件包依赖项的文件。如果存在此文件，则 pip 将安装其中列出的所有依赖项。
3. 源代码：这是软件包的源代码，它应该位于当前目录中或其子目录中。
最新的方法是用一个.toml文件将这些集成，nerfstudio用的就是这个方法
执行以后，.toml文件中的自定义命令可以直接通过命令行执行，每个自定义命令等于在命令行执行python ./path/to/func.py
因此，只要安装了项目所需的依赖项，完全可以不执行pip install -e .安装项目到pip库中（安装以后可以直接在命令行用用包装好的简化指令，更方便）
直接找到对应的.py文件执行，效果是一样的

关于新版的3D gaussian splatting viewer版nerfstudio：
这个项目代码其他部分几乎没改，就是加了一些gaussian相关的文件进去。
但是没有在.toml文件中加入，所以该版本给出的运行3D gaussian splatting viewer的方法是直接python run_viewer.py

[project.scripts]
# Note, add entrypoint name to nerfstudio/scripts/completions/install.py to include CLI completion
ns-install-cli = "nerfstudio.scripts.completions.install:entrypoint"
ns-process-data = "nerfstudio.scripts.process_data:entrypoint"
ns-download-data = "nerfstudio.scripts.downloads.download_data:entrypoint"
ns-train = "nerfstudio.scripts.train:entrypoint"
ns-viewer = "nerfstudio.scripts.viewer.run_viewer:entrypoint"
ns-eval = "nerfstudio.scripts.eval:entrypoint"
ns-render = "nerfstudio.scripts.render:entrypoint"
ns-export = "nerfstudio.scripts.exporter:entrypoint"
ns-dev-test = "nerfstudio.scripts.github.run_actions:entrypoint"
ns-dev-sync-viser-message-defs = "nerfstudio.scripts.viewer.sync_viser_message_defs:entrypoint"